package middlewave

import (
	"time"

	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
)

func InitLogger() *zap.Logger {
	lumberJackLogger := &lumberjack.Logger{
		Filename:   "/logs/myapp.log", // 日志文件路径
		MaxSize:    100,               // 日志文件最大大小（MB）
		MaxBackups: 5,                 // 保留旧文件的最大个数
		MaxAge:     28,                // 保留旧文件的最大天数
		Compress:   true,              // 是否压缩旧文件
	}

	writerSyncer := zapcore.AddSync(lumberJackLogger) // 将 lumberjack 包装为 zap 可以使用的格式

	encoderConfig := zapcore.EncoderConfig{
		MessageKey: "msg",
		LevelKey:   "level",
		TimeKey:    "ts",
		CallerKey:  "caller",
		EncodeTime: zapcore.ISO8601TimeEncoder,
	}

	core := zapcore.NewCore(
		zapcore.NewJSONEncoder(encoderConfig),
		writerSyncer,
		zap.NewAtomicLevelAt(zapcore.InfoLevel),
	)

	return zap.New(core, zap.AddCaller(), zap.AddCallerSkip(1))
}

/*
	func main() {
		logger := NewLogger()
		defer logger.Sync() // 确保日志正常关闭

		logger.Info("This is an info level log")
		// 其他业务逻辑...
	}
*/

func ZLogger(logger *zap.Logger) gin.HandlerFunc {

	return func(c *gin.Context) {

		start := time.Now()

		c.Next()

		latency := time.Since(start)

		logFields := []zapcore.Field{
			zap.Int("status", c.Writer.Status()),
			zap.String("method", c.Request.Method),
			zap.String("path", c.Request.URL.Path),
			zap.String("ip", c.ClientIP()),
			zap.String("user-agent", c.Request.UserAgent()),
			zap.String("errors", c.Errors.ByType(gin.ErrorTypePrivate).String()),
			zap.Duration("latency", latency),
		}
		if c.Writer.Status() >= 400 {
			logger.Sugar().Errorw("HTTP Error", zap.Fields(logFields...))

		} else {
			logger.Sugar().Infow("HTTP Request", zap.Fields(logFields...))

		}
	}
}
